# -*- coding: utf-8 -*-
"""Keras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wnmuy1Bg7nusJEBcecHMP_kvZYxF_VaY
"""

from google.colab import drive
drive.mount('/content/drive')

path = "/content/drive/My Drive/DL course/HW1/"

"""# Dataset
https://www.tensorflow.org/api_docs/python/tf/keras/datasets
"""

from tensorflow.keras import datasets
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt
import numpy as np

"""## MNIST
https://www.tensorflow.org/api_docs/python/tf/keras/datasets/mnist/load_data

### Loading dataset and Coverting labels to categorical form
https://www.tensorflow.org/api_docs/python/tf/keras/utils/to_categorical
"""

(x_train_1, y_train_1), (x_test_1, y_test_1) = datasets.mnist.load_data()
y_train_1 = to_categorical(y_train_1, num_classes=10)
y_test_1 = to_categorical(y_test_1, num_classes=10)

"""### Train and Test data shapes"""

print(x_train_1.shape)
print(y_train_1.shape)

print(x_test_1.shape)
print(y_test_1.shape)

"""### Showing one the dataset examples"""

index = 0
fig, (ax1) = plt.subplots(1, 1)
ax1.imshow(x_train_1[index])

"""## CIFAR-10
https://www.tensorflow.org/api_docs/python/tf/keras/datasets/cifar10/load_data

### Loading dataset and Coverting labels to categorical form
https://www.tensorflow.org/api_docs/python/tf/keras/utils/to_categorical
"""

(x_train_2, y_train_2), (x_test_2, y_test_2) = datasets.cifar10.load_data()
y_train_2 = to_categorical(y_train_2, num_classes=10)
y_test_2 = to_categorical(y_test_2, num_classes=10)

"""### Train and Test data shapes"""

print(x_train_2.shape)
print(y_train_2.shape)

print(x_test_2.shape)
print(y_test_2.shape)

"""### Showing one the dataset examples"""

index = 4
fig, (ax1) = plt.subplots(1, 1)
ax1.imshow(x_train_2[index])

"""## FER-2013
learn more about FER-2013 dataset:
https://www.kaggle.com/datasets/msambare/fer2013
"""

import zipfile

zip_ref = zipfile.ZipFile( path + "archive.zip", 'r')
zip_ref.extractall(path)
zip_ref.close()

# !wget -N -q "https://raw.githubusercontent.com/nikomadol/datasets/main/FER-2013/archive.zip"
# !unzip -n -q archive.zip
train_dir = path + 'train/'
test_dir = path + 'test/'

"""### Image Data Generator
https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/ImageDataGenerator
"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator

"""#### Create Image Data Generator for Train and Test sets"""

train_datagen = ImageDataGenerator(
    rescale=1./255,
    zoom_range=0.3,
    horizontal_flip=True,
    vertical_flip=False,
    validation_split=0.2,
)

test_datagen = ImageDataGenerator(rescale=1./255)

"""#### Use **.flow_from_directory(directory)** to read Train and Test sets"""

train_set = train_datagen.flow_from_directory(
    train_dir,
    batch_size=64,
    target_size=(48, 48),
    # shuffle=True,
    color_mode='grayscale',
    class_mode='categorical',
)

test_set = test_datagen.flow_from_directory(
    test_dir,
    batch_size=64,
    target_size=(48, 48),
    # shuffle=True,
    color_mode='grayscale',
    class_mode='categorical',
)

print(train_set)
print(test_set)

"""# Model
https://www.tensorflow.org/api_docs/python/tf/keras/models

https://www.tensorflow.org/api_docs/python/tf/keras/layers

"""

from tensorflow.keras import layers
from tensorflow.keras.utils import plot_model

"""## Sequential
https://www.tensorflow.org/guide/keras/sequential_model
"""

from tensorflow.keras.models import Sequential

model_temp_1 = Sequential()

# Input Layer
# Write your code here
model_temp_1.add(layers.Input(shape=(50, 50)))
model_temp_1.add(layers.Flatten())

# Hidden Layer
# Write your code here
model_temp_1.add(layers.Dense(128))
model_temp_1.add(layers.Activation('relu'))

# Output Layer
# Write your code here
model_temp_1.add(layers.Dense(5))
model_temp_1.add(layers.Activation('softmax'))

"""### Model Summary
https://www.tensorflow.org/js/guide/models_and_layers#model_summary
"""

model_temp_1.summary()

"""### Plotting Model and Save it as **structure_1.png**
https://www.tensorflow.org/api_docs/python/tf/keras/utils/plot_model 
"""

plot_model(
    model_temp_1,
    to_file="structure_1.png",
    show_shapes=True,
    show_layer_names=True,
)

"""## Functional API 
https://www.tensorflow.org/guide/keras/functional
"""

from tensorflow.keras.models import Model

def model_factory(input_shape, num_classes):
    # Input Layer
    # Write your code here
    input = layers.Input(shape=input_shape)
    x = layers.Flatten()(input)

    # Hidden Layer
    # Write your code here
    x = layers.Dense(128)(x)
    x = layers.Activation('relu')(x)

    # Output Layer
    # Write your code here
    x = layers.Dense(num_classes)(x)
    output = layers.Activation('softmax')(x)

    return Model(inputs=input, outputs=output)

model_template_2 = model_factory(
    input_shape=(50, 50),
    num_classes=5,
)

"""### Model Summary"""

model_template_2.summary()

"""### Plotting Model and Save it as **structure_2.png**"""

plot_model(
    model_template_2,
    to_file="structure_2.png",
    show_shapes=True,
    show_layer_names=True,
)

"""## Optimizers and Loss
https://www.tensorflow.org/api_docs/python/tf/keras/optimizers/SGD

https://www.tensorflow.org/api_docs/python/tf/keras/losses
"""

from tensorflow.keras.optimizers import SGD

# Write your code here
sgd_optimizer = SGD(learning_rate=0.01, momentum=0.0)
loss = 'categorical_crossentropy'

"""## Compile, Fit and Evaluation
https://www.tensorflow.org/api_docs/python/tf/keras/Model#compile

https://www.tensorflow.org/api_docs/python/tf/keras/Model#fit

https://www.tensorflow.org/api_docs/python/tf/keras/Model#evaluate

https://keras.io/api/models/model_training_apis/#predict-method

### MNIST
"""

# Write your code here
model_mnist = model_factory(
    input_shape=(28, 28),
    num_classes=10
)

# Write your code here
model_mnist.compile(
    loss=loss,
    optimizer=sgd_optimizer,
    metrics=['accuracy']
)

# Write your code here
history = model_mnist.fit(
    x=x_train_1,
    y=y_train_1,
    batch_size=64,
    epochs=5,
    validation_split=0.2,
    shuffle=True
)

"""#### Plotting model Loss and Accuracy on train and validation sets per epoch"""

fig, (ax1, ax2) = plt.subplots(1, 2)

ax1.plot(history.history['accuracy'])
ax1.plot(history.history['val_accuracy'])
ax1.set_title('Model accuracy')
ax1.set_ylabel('accuracy')
ax1.set_xlabel('epoch')
ax1.legend(['training', 'validation'], loc='lower right')

ax2.plot(history.history['loss'])
ax2.plot(history.history['val_loss'])
ax2.set_title('Model loss')
ax2.set_ylabel('loss')
ax2.set_xlabel('epoch')
ax2.legend(['training', 'validation'], loc='upper right')

"""#### Evaluating Test set"""

# Write your code here
model_mnist.evaluate(
    x=x_test_1,
    y=y_test_1,
    batch_size=64
)

"""#### Predicting Some samples from Test set"""

# Write your code here
import random
for i in range(10):
    index = random.randint(0, 10000)
    y_predicted = model_mnist.predict(np.array([x_test_1[index]]))
    print(f"y_predicted : {np.argmax(y_predicted)} , y_true : {np.argmax(y_test_1[index])}")

"""### FER-2013"""

# Write your code here
model_fer = model_factory(
    input_shape=(48, 48, 1),
    num_classes=7
)

# Write your code here
model_fer.compile(
    loss=loss,
    optimizer=sgd_optimizer,
    metrics=['accuracy'],
)

# Write your code here
history = model_fer.fit(
    x=train_set,
    epochs=5,
    validation_data=train_set,
)

"""#### Plotting model Loss and Accuracy on train and validation sets per epoch"""

fig, (ax1, ax2) = plt.subplots(1, 2)

ax1.plot(history.history['accuracy'])
ax1.plot(history.history['val_accuracy'])
ax1.set_title('Model accuracy')
ax1.set_ylabel('accuracy')
ax1.set_xlabel('epoch')
ax1.legend(['training', 'validation'], loc='lower right')

ax2.plot(history.history['loss'])
ax2.plot(history.history['val_loss'])
ax2.set_title('Model loss')
ax2.set_ylabel('loss')
ax2.set_xlabel('epoch')
ax2.legend(['training', 'validation'], loc='upper right')

"""#### Evaluating Test set"""

model_fer.evaluate(
    x=test_set,
)

"""#### Predicting Some samples from Test set"""

prediction = model_fer.predict(test_set)
# convert prediction to labels
labels = prediction.argmax(axis=-1)

# labels list
label_list = list(test_set.class_indices.keys())

plt.figure()
f, axarr = plt.subplots(1,3) 

# use the created array to output your multiple images.
axarr[0].imshow(np.squeeze(test_set[0][0][5]))
label_1 = label_list[test_set[0][1][5].argmax(axis=-1)]
axarr[1].imshow(np.squeeze(test_set[0][0][29]))
label_2 = label_list[test_set[0][1][29].argmax(axis=-1)]
axarr[2].imshow(np.squeeze(test_set[0][0][10]))
label_3 = label_list[test_set[0][1][10].argmax(axis=-1)]

# Show predicted label for each image
axarr[0].set_title(f'predicted: {label_list[labels[5]]} \n actual: {label_1}')
axarr[1].set_title(f'label: {label_list[labels[29]]} \n actual: {label_2}')
axarr[2].set_title(f'label: {label_list[labels[10]]} \n actual: {label_3}')

